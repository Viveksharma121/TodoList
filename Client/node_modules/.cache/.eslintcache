[{"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\index.js":"1","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\App.js":"2","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Reg.jsx":"3","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Todo.jsx":"4","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Login.jsx":"5","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\TodoPage.jsx":"6"},{"size":274,"mtime":1692185750976,"results":"7","hashOfConfig":"8"},{"size":934,"mtime":1692966590041,"results":"9","hashOfConfig":"8"},{"size":2394,"mtime":1693248430203,"results":"10","hashOfConfig":"8"},{"size":3995,"mtime":1694461206204,"results":"11","hashOfConfig":"8"},{"size":1918,"mtime":1693248723124,"results":"12","hashOfConfig":"8"},{"size":3857,"mtime":1694462456076,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ufps1q",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\index.js",[],[],"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\App.js",[],[],"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Reg.jsx",[],[],"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Todo.jsx",["34"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport \"./Todo.css\"; // Import your stylesheet\r\n\r\nconst Todo = () => {\r\n  const history = useNavigate();\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const handleEdit = (taskId) => {\r\n    history(`/todo/${taskId}/edit`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkLoggedIn();\r\n    fetchAndStore();\r\n  }, []);\r\n\r\n  const getToken = () => {\r\n    return localStorage.getItem(\"token\");\r\n  };\r\n\r\n  const checkLoggedIn = () => {\r\n    const token = getToken();\r\n    if (!token) {\r\n      history(\"/\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\r\n      if (!decodedToken) {\r\n        history(\"/\");\r\n        return;\r\n      }\r\n\r\n      console.log(\"User is logged in and has a valid token.\");\r\n    } catch (error) {\r\n      console.error(\"Error while checking login status:\", error);\r\n      history(\"/\");\r\n    }\r\n  };\r\n\r\n  const fetchAndStore = () => {\r\n    fetch(\"https://todo-list-pl2e.vercel.app/api/tasks\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        authorization: localStorage.getItem(\"token\"),\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const userId = getUserIdFromToken();\r\n        const userTasks = data.filter((task) => task.userId === userId);\r\n        setTasks(userTasks);\r\n      })\r\n      .catch((err) => {\r\n        console.error(\"Error \", err);\r\n      });\r\n  };\r\n\r\n  const getUserIdFromToken = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      return null;\r\n    }\r\n    try {\r\n      const decodedToken = JSON.parse(atob(token.split(\".\")[1]));\r\n      return decodedToken.id;\r\n    } catch (error) {\r\n      console.error(\"Error while decoding token:\", error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (taskId) => {\r\n    await fetch(`https://todo-list-pl2e.vercel.app/api/tasks/todo/${taskId}`, {\r\n      method: \"DELETE\",\r\n    })\r\n      .then(() => {\r\n        setTasks((prev) => prev.filter((tasks) => tasks._id !== taskId));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error while deleting task:\", error);\r\n      });\r\n  };\r\n\r\n  function logout() {\r\n    console.log(\"Logout function started\");\r\n    console.log(localStorage.getItem(\"token\"));\r\n    localStorage.removeItem(\"token\");\r\n    history(\"/\");\r\n  }\r\n\r\n  return (\r\n    <div id=\"standard\">\r\n      <div id=\"pig\">\r\n        <header>\r\n          <header id=\"together\">\r\n            <h2 id=\"h2\">TASK LIST. What's for today!!</h2>\r\n            <button id=\"logoutBtn\" onClick={logout}>\r\n              Logout\r\n            </button>\r\n          </header>\r\n        </header>\r\n        <main>\r\n          <section className=\"tdolist\">\r\n            <h2>TASKS</h2>\r\n            <div id=\"tasks\">\r\n              {tasks.map((task) => (\r\n                <div key={task._id} className=\"task\">\r\n                  <div className=\"content\">\r\n                    <input\r\n                      className=\"taskinput\"\r\n                      value={task.title}\r\n                      readOnly\r\n                      onClick={() => history(`/todo/${task._id}/edit`)}\r\n                    />\r\n                    <button\r\n                      className=\"editbtn\"\r\n                      onClick={() => handleEdit(task._id)}\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      className=\"delbtn\"\r\n                      onClick={() => handleDelete(task._id)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <button\r\n              class=\"add-todo-button\"\r\n              onClick={() => history(\"/todopage\")}\r\n            >\r\n              Add Todo\r\n            </button>\r\n          </section>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\Login.jsx",[],[],"C:\\Users\\Asus\\Desktop\\JavaScriptProject\\ClonedRepo\\TodoList\\Client\\src\\components\\TodoPage.jsx",["35"],[],"import React, { useEffect, useState } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"./TodoPage.css\";\r\n// import jwt from \"jsonwebtoken\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router\";\r\nimport { useNavigate } from \"react-router\";\r\nfunction TodoPage() {\r\n  const history = useNavigate();\r\n  const { taskId } = useParams();\r\n  console.log(taskId + \" needed\");\r\n  const [title, settitle] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const getToken = () => {\r\n    return localStorage.getItem(\"token\");\r\n  };\r\n\r\n  const handleTextChange = (newText) => {\r\n    setText(newText);\r\n    console.log(text);\r\n  };\r\n  const removeHtmlTags = (input) => {\r\n    return input.replace(/<\\/?[^>]+(>|$)/g, \"\");\r\n  };\r\n  const CreateTask = async () => {\r\n    try {\r\n      const token = getToken();\r\n      console.log(token + \" this is token\");\r\n      const decodedtoken = jwt_decode(token);\r\n      const userId = decodedtoken.id;\r\n      const response = await axios.post(\r\n        \"https://todo-list-pl2e.vercel.app/api/tasks\",\r\n        {\r\n          title: removeHtmlTags(title || text.split(\" \").slice(0, 3).join(\" \")),\r\n          task: text,\r\n          userId,\r\n        }\r\n      );\r\n      console.log(\"Task create \", response.data);\r\n      settitle(\"\");\r\n      settitle(\"\");\r\n      history(\"/todo\");\r\n    } catch (error) {\r\n      console.log(\"error\");\r\n    }\r\n  };\r\n  const fetchTask = async () => {\r\n    try {\r\n      const token = getToken();\r\n      console.log(token + \" this is token\");\r\n      const decodedtoken = jwt_decode(token);\r\n      const userId = decodedtoken.id;\r\n      console.log(userId);\r\n\r\n      const response = await axios.get(\r\n        `https://todo-list-pl2e.vercel.app/api/tasks/todo/${taskId}`,\r\n        {\r\n          headers: {\r\n            Authorization: token,\r\n          },\r\n        }\r\n      );\r\n\r\n      // if (response.data.length > 0) {\r\n      const fetchedData = response.data;\r\n      const cleanTitle = removeHtmlTags(fetchedData.title);\r\n      const cleanText = fetchedData.task;\r\n      settitle(cleanTitle);\r\n      handleTextChange(cleanText);\r\n      // }\r\n\r\n      console.log(response.title);\r\n    } catch (error) {\r\n      console.log(\"error\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchTask();\r\n  }, []);\r\n\r\n  const UpdateTask = async () => {\r\n    try {\r\n      const token = getToken();\r\n      console.log(token + \" this is token\");\r\n      const decodedtoken = jwt_decode(token);\r\n      const userId = decodedtoken.id;\r\n      const response = await axios.put(\r\n        `https://todo-list-pl2e.vercel.app/api/tasks/todo/${taskId}/edit`,\r\n        {\r\n          title,\r\n          task: text,\r\n          userId,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: token,\r\n          },\r\n        }\r\n      );\r\n      setText(\"\");\r\n      settitle(\"\");\r\n      console.log(\"response\", response);\r\n      history(\"/todo\");\r\n    } catch (error) {\r\n      console.log(error + \" error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <div className=\"todo-title\">\r\n        <input\r\n          placeholder=\"Title\"\r\n          value={title}\r\n          onChange={(e) => settitle(e.target.value)}\r\n          className=\"title-input1\"\r\n        />\r\n      </div>\r\n      <br />\r\n      <div className=\"todo-body\">\r\n        <ReactQuill\r\n          value={text}\r\n          onChange={handleTextChange}\r\n          className=\"body-input\"\r\n          placeholder=\"Enter here ...\"\r\n        />\r\n      </div>\r\n      {taskId ? (\r\n        <button onClick={UpdateTask} className=\"edit-btn\">\r\n          Save Changes\r\n        </button>\r\n      ) : (\r\n        <button onClick={CreateTask} className=\"save-btn\">\r\n          Create\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoPage;\r\n",{"ruleId":"36","severity":1,"message":"37","line":16,"column":6,"nodeType":"38","endLine":16,"endColumn":8,"suggestions":"39"},{"ruleId":"36","severity":1,"message":"40","line":81,"column":6,"nodeType":"38","endLine":81,"endColumn":8,"suggestions":"41"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkLoggedIn' and 'fetchAndStore'. Either include them or remove the dependency array.","ArrayExpression",["42"],"React Hook useEffect has a missing dependency: 'fetchTask'. Either include it or remove the dependency array.",["43"],{"desc":"44","fix":"45"},{"desc":"46","fix":"47"},"Update the dependencies array to be: [checkLoggedIn, fetchAndStore]",{"range":"48","text":"49"},"Update the dependencies array to be: [fetchTask]",{"range":"50","text":"51"},[401,403],"[checkLoggedIn, fetchAndStore]",[2352,2354],"[fetchTask]"]